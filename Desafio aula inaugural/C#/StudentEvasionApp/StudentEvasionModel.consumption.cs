// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace StudentEvasionApp
{
    public partial class StudentEvasionModel
    {
        /// <summary>
        /// model input class for StudentEvasionModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"Marital status")]
            public float Marital_status { get; set; }

            [LoadColumn(1)]
            [ColumnName(@"Application mode")]
            public float Application_mode { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"Application order")]
            public float Application_order { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"Course")]
            public float Course { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"Daytime/evening attendance")]
            public float Daytime_evening_attendance { get; set; }

            [LoadColumn(5)]
            [ColumnName(@"Previous qualification")]
            public float Previous_qualification { get; set; }

            [LoadColumn(6)]
            [ColumnName(@"Nacionality")]
            public float Nacionality { get; set; }

            [LoadColumn(7)]
            [ColumnName(@"Mother's qualification")]
            public float Mother_s_qualification { get; set; }

            [LoadColumn(8)]
            [ColumnName(@"Father's qualification")]
            public float Father_s_qualification { get; set; }

            [LoadColumn(9)]
            [ColumnName(@"Mother's occupation")]
            public float Mother_s_occupation { get; set; }

            [LoadColumn(10)]
            [ColumnName(@"Father's occupation")]
            public float Father_s_occupation { get; set; }

            [LoadColumn(11)]
            [ColumnName(@"Displaced")]
            public float Displaced { get; set; }

            [LoadColumn(12)]
            [ColumnName(@"Educational special needs")]
            public float Educational_special_needs { get; set; }

            [LoadColumn(13)]
            [ColumnName(@"Debtor")]
            public float Debtor { get; set; }

            [LoadColumn(14)]
            [ColumnName(@"Tuition fees up to date")]
            public float Tuition_fees_up_to_date { get; set; }

            [LoadColumn(15)]
            [ColumnName(@"Gender")]
            public float Gender { get; set; }

            [LoadColumn(16)]
            [ColumnName(@"Scholarship holder")]
            public float Scholarship_holder { get; set; }

            [LoadColumn(17)]
            [ColumnName(@"Age at enrollment")]
            public float Age_at_enrollment { get; set; }

            [LoadColumn(18)]
            [ColumnName(@"International")]
            public float International { get; set; }

            [LoadColumn(19)]
            [ColumnName(@"Curricular units 1st sem (credited)")]
            public float Curricular_units_1st_sem__credited_ { get; set; }

            [LoadColumn(20)]
            [ColumnName(@"Curricular units 1st sem (enrolled)")]
            public float Curricular_units_1st_sem__enrolled_ { get; set; }

            [LoadColumn(21)]
            [ColumnName(@"Curricular units 1st sem (evaluations)")]
            public float Curricular_units_1st_sem__evaluations_ { get; set; }

            [LoadColumn(22)]
            [ColumnName(@"Curricular units 1st sem (approved)")]
            public float Curricular_units_1st_sem__approved_ { get; set; }

            [LoadColumn(23)]
            [ColumnName(@"Curricular units 1st sem (grade)")]
            public float Curricular_units_1st_sem__grade_ { get; set; }

            [LoadColumn(24)]
            [ColumnName(@"Curricular units 1st sem (without evaluations)")]
            public float Curricular_units_1st_sem__without_evaluations_ { get; set; }

            [LoadColumn(25)]
            [ColumnName(@"Curricular units 2nd sem (credited)")]
            public float Curricular_units_2nd_sem__credited_ { get; set; }

            [LoadColumn(26)]
            [ColumnName(@"Curricular units 2nd sem (enrolled)")]
            public float Curricular_units_2nd_sem__enrolled_ { get; set; }

            [LoadColumn(27)]
            [ColumnName(@"Curricular units 2nd sem (evaluations)")]
            public float Curricular_units_2nd_sem__evaluations_ { get; set; }

            [LoadColumn(28)]
            [ColumnName(@"Curricular units 2nd sem (approved)")]
            public float Curricular_units_2nd_sem__approved_ { get; set; }

            [LoadColumn(29)]
            [ColumnName(@"Curricular units 2nd sem (grade)")]
            public float Curricular_units_2nd_sem__grade_ { get; set; }

            [LoadColumn(30)]
            [ColumnName(@"Curricular units 2nd sem (without evaluations)")]
            public float Curricular_units_2nd_sem__without_evaluations_ { get; set; }

            [LoadColumn(31)]
            [ColumnName(@"Unemployment rate")]
            public float Unemployment_rate { get; set; }

            [LoadColumn(32)]
            [ColumnName(@"Inflation rate")]
            public float Inflation_rate { get; set; }

            [LoadColumn(33)]
            [ColumnName(@"GDP")]
            public float GDP { get; set; }

            [LoadColumn(34)]
            [ColumnName(@"Target")]
            public string Target { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for StudentEvasionModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"Marital status")]
            public float Marital_status { get; set; }

            [ColumnName(@"Application mode")]
            public float Application_mode { get; set; }

            [ColumnName(@"Application order")]
            public float Application_order { get; set; }

            [ColumnName(@"Course")]
            public float Course { get; set; }

            [ColumnName(@"Daytime/evening attendance")]
            public float Daytime_evening_attendance { get; set; }

            [ColumnName(@"Previous qualification")]
            public float Previous_qualification { get; set; }

            [ColumnName(@"Nacionality")]
            public float Nacionality { get; set; }

            [ColumnName(@"Mother's qualification")]
            public float Mother_s_qualification { get; set; }

            [ColumnName(@"Father's qualification")]
            public float Father_s_qualification { get; set; }

            [ColumnName(@"Mother's occupation")]
            public float Mother_s_occupation { get; set; }

            [ColumnName(@"Father's occupation")]
            public float Father_s_occupation { get; set; }

            [ColumnName(@"Displaced")]
            public float Displaced { get; set; }

            [ColumnName(@"Educational special needs")]
            public float Educational_special_needs { get; set; }

            [ColumnName(@"Debtor")]
            public float Debtor { get; set; }

            [ColumnName(@"Tuition fees up to date")]
            public float Tuition_fees_up_to_date { get; set; }

            [ColumnName(@"Gender")]
            public float Gender { get; set; }

            [ColumnName(@"Scholarship holder")]
            public float Scholarship_holder { get; set; }

            [ColumnName(@"Age at enrollment")]
            public float Age_at_enrollment { get; set; }

            [ColumnName(@"International")]
            public float International { get; set; }

            [ColumnName(@"Curricular units 1st sem (credited)")]
            public float Curricular_units_1st_sem__credited_ { get; set; }

            [ColumnName(@"Curricular units 1st sem (enrolled)")]
            public float Curricular_units_1st_sem__enrolled_ { get; set; }

            [ColumnName(@"Curricular units 1st sem (evaluations)")]
            public float Curricular_units_1st_sem__evaluations_ { get; set; }

            [ColumnName(@"Curricular units 1st sem (approved)")]
            public float Curricular_units_1st_sem__approved_ { get; set; }

            [ColumnName(@"Curricular units 1st sem (grade)")]
            public float Curricular_units_1st_sem__grade_ { get; set; }

            [ColumnName(@"Curricular units 1st sem (without evaluations)")]
            public float Curricular_units_1st_sem__without_evaluations_ { get; set; }

            [ColumnName(@"Curricular units 2nd sem (credited)")]
            public float Curricular_units_2nd_sem__credited_ { get; set; }

            [ColumnName(@"Curricular units 2nd sem (enrolled)")]
            public float Curricular_units_2nd_sem__enrolled_ { get; set; }

            [ColumnName(@"Curricular units 2nd sem (evaluations)")]
            public float Curricular_units_2nd_sem__evaluations_ { get; set; }

            [ColumnName(@"Curricular units 2nd sem (approved)")]
            public float Curricular_units_2nd_sem__approved_ { get; set; }

            [ColumnName(@"Curricular units 2nd sem (grade)")]
            public float Curricular_units_2nd_sem__grade_ { get; set; }

            [ColumnName(@"Curricular units 2nd sem (without evaluations)")]
            public float Curricular_units_2nd_sem__without_evaluations_ { get; set; }

            [ColumnName(@"Unemployment rate")]
            public float Unemployment_rate { get; set; }

            [ColumnName(@"Inflation rate")]
            public float Inflation_rate { get; set; }

            [ColumnName(@"GDP")]
            public float GDP { get; set; }

            [ColumnName(@"Target")]
            public uint Target { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public string PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string _mLNetModelPath = Path.GetFullPath("StudentEvasionModel.mlnet");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(_mLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict scores for all possible labels.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static IOrderedEnumerable<KeyValuePair<string, float>> PredictAllLabels(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            var result = predEngine.Predict(input);
            return GetSortedScoresWithLabels(result);
        }

        /// <summary>
        /// Map the unlabeled result score array to the predicted label names.
        /// </summary>
        /// <param name="result">Prediction to get the labeled scores from.</param>
        /// <returns>Ordered list of label and score.</returns>
        /// <exception cref="Exception"></exception>
        public static IOrderedEnumerable<KeyValuePair<string, float>> GetSortedScoresWithLabels(ModelOutput result)
        {
            var unlabeledScores = result.Score;
            var labelNames = GetLabels(result);

            Dictionary<string, float> labledScores = [];
            for (int i = 0; i < labelNames.Count(); i++)
            {
                // Map the names to the predicted result score array
                var labelName = labelNames.ElementAt(i);
                labledScores.Add(labelName.ToString(), unlabeledScores[i]);
            }

            return labledScores.OrderByDescending(c => c.Value);
        }

        /// <summary>
        /// Get the ordered label names.
        /// </summary>
        /// <param name="result">Predicted result to get the labels from.</param>
        /// <returns>List of labels.</returns>
        /// <exception cref="Exception"></exception>
        private static IEnumerable<string> GetLabels(ModelOutput result)
        {
            var schema = PredictEngine.Value.OutputSchema;

            var labelColumn = schema.GetColumnOrNull("Target");

            if (labelColumn == null)
            {
                throw new Exception("Target column not found. Make sure the name searched for matches the name in the schema.");
            }

            // Key values contains an ordered array of the possible labels. This allows us to map the results to the correct label value.
            var keyNames = new VBuffer<ReadOnlyMemory<char>>();
            labelColumn.Value.GetKeyValues(ref keyNames);
            return keyNames.DenseValues().Select(x => x.ToString());
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
