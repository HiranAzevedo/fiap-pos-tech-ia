// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Trainers;

namespace StudentEvasionApp
{
    public partial class StudentEvasionModel
    {
        public const string RetrainFilePath =  @"C:\Users\Loja Integrada Hiran\Downloads\dropout-inaugural.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;
        public const bool RetrainAllowQuoting =  false;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader, bool allowQuoting = RetrainAllowQuoting)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader, allowQuoting);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader, bool allowQuoting)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader, allowQuoting: allowQuoting);
        }


        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Marital status", @"Marital status"),new InputOutputColumnPair(@"Application mode", @"Application mode"),new InputOutputColumnPair(@"Application order", @"Application order"),new InputOutputColumnPair(@"Course", @"Course"),new InputOutputColumnPair(@"Daytime/evening attendance", @"Daytime/evening attendance"),new InputOutputColumnPair(@"Previous qualification", @"Previous qualification"),new InputOutputColumnPair(@"Nacionality", @"Nacionality"),new InputOutputColumnPair(@"Mother's qualification", @"Mother's qualification"),new InputOutputColumnPair(@"Father's qualification", @"Father's qualification"),new InputOutputColumnPair(@"Mother's occupation", @"Mother's occupation"),new InputOutputColumnPair(@"Father's occupation", @"Father's occupation"),new InputOutputColumnPair(@"Displaced", @"Displaced"),new InputOutputColumnPair(@"Educational special needs", @"Educational special needs"),new InputOutputColumnPair(@"Debtor", @"Debtor"),new InputOutputColumnPair(@"Tuition fees up to date", @"Tuition fees up to date"),new InputOutputColumnPair(@"Gender", @"Gender"),new InputOutputColumnPair(@"Scholarship holder", @"Scholarship holder"),new InputOutputColumnPair(@"Age at enrollment", @"Age at enrollment"),new InputOutputColumnPair(@"International", @"International"),new InputOutputColumnPair(@"Curricular units 1st sem (credited)", @"Curricular units 1st sem (credited)"),new InputOutputColumnPair(@"Curricular units 1st sem (enrolled)", @"Curricular units 1st sem (enrolled)"),new InputOutputColumnPair(@"Curricular units 1st sem (evaluations)", @"Curricular units 1st sem (evaluations)"),new InputOutputColumnPair(@"Curricular units 1st sem (approved)", @"Curricular units 1st sem (approved)"),new InputOutputColumnPair(@"Curricular units 1st sem (grade)", @"Curricular units 1st sem (grade)"),new InputOutputColumnPair(@"Curricular units 1st sem (without evaluations)", @"Curricular units 1st sem (without evaluations)"),new InputOutputColumnPair(@"Curricular units 2nd sem (credited)", @"Curricular units 2nd sem (credited)"),new InputOutputColumnPair(@"Curricular units 2nd sem (enrolled)", @"Curricular units 2nd sem (enrolled)"),new InputOutputColumnPair(@"Curricular units 2nd sem (evaluations)", @"Curricular units 2nd sem (evaluations)"),new InputOutputColumnPair(@"Curricular units 2nd sem (approved)", @"Curricular units 2nd sem (approved)"),new InputOutputColumnPair(@"Curricular units 2nd sem (grade)", @"Curricular units 2nd sem (grade)"),new InputOutputColumnPair(@"Curricular units 2nd sem (without evaluations)", @"Curricular units 2nd sem (without evaluations)"),new InputOutputColumnPair(@"Unemployment rate", @"Unemployment rate"),new InputOutputColumnPair(@"Inflation rate", @"Inflation rate"),new InputOutputColumnPair(@"GDP", @"GDP")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Marital status",@"Application mode",@"Application order",@"Course",@"Daytime/evening attendance",@"Previous qualification",@"Nacionality",@"Mother's qualification",@"Father's qualification",@"Mother's occupation",@"Father's occupation",@"Displaced",@"Educational special needs",@"Debtor",@"Tuition fees up to date",@"Gender",@"Scholarship holder",@"Age at enrollment",@"International",@"Curricular units 1st sem (credited)",@"Curricular units 1st sem (enrolled)",@"Curricular units 1st sem (evaluations)",@"Curricular units 1st sem (approved)",@"Curricular units 1st sem (grade)",@"Curricular units 1st sem (without evaluations)",@"Curricular units 2nd sem (credited)",@"Curricular units 2nd sem (enrolled)",@"Curricular units 2nd sem (evaluations)",@"Curricular units 2nd sem (approved)",@"Curricular units 2nd sem (grade)",@"Curricular units 2nd sem (without evaluations)",@"Unemployment rate",@"Inflation rate",@"GDP"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"Target",inputColumnName:@"Target",addKeyValueAnnotationsAsText:false))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator: mlContext.BinaryClassification.Trainers.LbfgsLogisticRegression(new LbfgsLogisticRegressionBinaryTrainer.Options(){L1Regularization=0.03125F,L2Regularization=5.875039F,LabelColumnName=@"Target",FeatureColumnName=@"Features"}), labelColumnName:@"Target"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }
